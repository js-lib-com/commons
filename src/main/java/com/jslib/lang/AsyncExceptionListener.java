package com.jslib.lang;

/**
 * Asynchronous exception listener. When asynchronous logic is executed from threads, loops, timers or tasks, caller has no
 * chance to catch exceptions, of course because are thrown in a separated execution thread. This listener is used just for
 * that; its hook method is invoked when asynchronous logic fails. It is asynchronous logic responsibility to trigger
 * asynchronous exception event.
 * <p>
 * It is implementation detail if exception listener is global per application or create new instance for every asynchronous
 * logic. Here is an example of using exception lister with looper thread. {@link LooperThread} takes care to trigger
 * {@link #onAsyncException(Throwable)}.
 * 
 * <pre>
 * class DemoLooper implements Looper, AsyncExceptionListener {
 * 	private LooperThread thread;
 * 
 * 	DemoLooper() {
 * 		tread = new LooperThread(this);
 * 		...
 * 	}
 * 
 * 	void onAsyncException(Throwable throwable) {
 * 		// handle loop iteration exception
 * 	}
 * }
 * </pre>
 * <p>
 * If user code creates its own thread is recommended to invoke this listener like in sample code below.
 * 
 * <pre>
 * 	public void run() {
 * 		try {
 * 			...
 * 		} catch (Throwable throwable) {
 * 			listener.onAsyncException(throwable);
 * 		}
 * 	}
 * </pre>
 * 
 * @author Iulian Rotaru
 */
public interface AsyncExceptionListener {
	/**
	 * Hook method executed when an asynchronous logic fails.
	 * 
	 * @param throwable exception generated by an asynchronous logic.
	 */
	void onAsyncException(Throwable throwable);
}
