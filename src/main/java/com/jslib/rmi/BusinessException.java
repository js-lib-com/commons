package com.jslib.rmi;

/**
 * Business logic constrains generated by application logic from server and sent to client as it is. It transports error codes
 * that are agreed between server side and client logic.
 * <p>
 * Under normal conditions client data is validated by client logic and reach the server side normalized. Anyway, there may be
 * complex business constrains between data items, data that is persisted on server. In order to avoid server communication
 * delays and adding complexity to client, data validation logic uses this exception to signal a constrain is not fulfilled.
 * Client side logic will display an alert based on this exception error code.
 * <p>
 * <b>Developers note:</b> business exception instance is sent back to client code via HTTP-RMI using status code 400 -
 * HttpServletResponse.SC_BAD_REQUEST and JSON serialization.
 * 
 * <pre>
 * public void saveEmployer(Employer employer) throws BusinessException {
 * 	BusinessRules.uniqueEmployerClientCode(employer);
 * 	BusinessRules.uniqueEmployerName(employer);
 * 	dao.saveEmployer(employer);
 * }
 * 
 * public class BusinessRules {
 * 	private static final int NOT_UNIQUE_CLIENT_CODE = 0x0001;
 * 	private static final int NOT_UNIQUE_EMPLOYER_NAME = 0x0002;
 * 
 * 	public static void uniqueEmployerClientCode(Employer employer) throws BusinessException {
 * 		if (dao.getEmployerIdByClientCode(clientCode) != employer.getId()) {
 * 			throw new BusinessException(NOT_UNIQUE_CLIENT_CODE);
 * 		}
 * 	}
 * 
 * 	public static void uniqueEmployerName(Employer employer) throws BusinessException {
 * 		if (dao.getEmployerIdByName(name) != employer.getId()) {
 * 			throw new BusinessException(NOT_UNIQUE_EMPLOYER_NAME);
 * 		}
 * 	}
 * }
 * </pre>
 * 
 * Note that this exception is checked since it is desirable to explicitly state we are going to use it.
 * 
 * @author Iulian Rotaru
 */
public final class BusinessException extends Exception {
	/** Java serialization version. */
	private static final long serialVersionUID = -3937247527417119925L;

	/** Business logic error code. */
	private final int errorCode;

	/** Default constructor for JSON serialization. */
	public BusinessException() {
		errorCode = 0;
	}

	/**
	 * Create immutable instance.
	 * 
	 * @param errorCode business logic error code.
	 */
	public BusinessException(int errorCode) {
		this.errorCode = errorCode;
	}

	/**
	 * Get business logic error code.
	 * 
	 * @return business logic error code.
	 */
	public int getErrorCode() {
		return errorCode;
	}

	/**
	 * Get this business error code formated as 8 digits hexadecimal number.
	 * 
	 * @return error code in hexadecimal format.
	 */
	@Override
	public String getMessage() {
		return String.format("0x%08X", errorCode);
	}
}
